# CentOS /usr/share/nginx/html
# Debian /var/www/

# === BASIC USAGE ===

# Defining virtual server context
server {
    # Defining server is listening on the given IP:Port combination
    listen 127.0.0.1:80;
    listen 127.0.0.1;    # by default port :80 is used
    listen *:81;
    listen 81;           # by default all ips are used
    listen [::]:80;      # IPv6 addresses
    listen [::1];        # IPv6 addresses
    listen unix:/var/run/nginx.sock;    # Is it possible to specify UNIX-domain sockets
    listen localhost:80;    # You can even use hostname, with caution the hostname may not be resolved upon nginx's launch

    # Defining server_name to test Host header, which stores the domain name of the server
    server_name netguru.co www.netguru.co; # exact match
    server_name *.netguru.co;              # wildcard matching
    server_name netguru.*;                 # wildcard matching
    server_name  ~^[0-9]*\.netguru\.co$;   # regexp matching

    # Defining root directory for requests, allowing nginx to map the incoming request onto the file system.
    root /var/www/netguru.co;

    # Defining location for set configuration depending on the requested URI
    # =           - Exact match
    # ^~          - Preferential match
    # ~ && ~*     - Regex match
    # no modifier - Prefix match
    location / {
        return 200 "root";
    }

    location /match {
        return 200 'Prefix match: matches everything that starting with /match';
    }

    location ~* /match[0-9] {
        return 200 'Case insensitive regex match';
    }

    location ~ /MATCH[0-9] {
        return 200 'Case sensitive regex match';
    }

    location ^~ /match0 {
        return 200 'Preferential match';
    }

    location = /match {
        return 200 'Exact match';   
    }

    # Defining try_files, which means nginx will try different paths, returning whichever is found
    try_files $uri index.html =404;
    # So for /foo.html , it will try to return files in the following order:
    #     1. $uri ( /foo.html );
    #     2. index.html;
    #     3. If none is found: 404.
    # Avoid try_files in server context, because our try_files wouldn't be executed
    location / {
        try_files $uri /index.html =404;
    }
}